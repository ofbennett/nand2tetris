// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array mem;
    static int heapStart;
    static int heapEnd;
    static int endSeg;

    /** Initializes the class. */
    function void init() {
        let mem = 0;
        let heapStart = 2048;
        let heapEnd = 16383;
        let mem[heapStart] = heapEnd - heapStart;
        let mem[heapStart + 1] = -1;
        let endSeg = heapStart;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var int result;
        let result = mem[address];
        return result;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let mem[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int currentSeg;
        var int foundSeg;
        var int segLength;
        let currentSeg = heapStart;
        while (true){
            if (currentSeg = -1){
                return -1;
            }
            if (mem[currentSeg] - 2 > size - 1){
                let segLength = mem[currentSeg];
                let foundSeg = currentSeg + segLength - 1 - size;
                let mem[foundSeg] = size + 1;
                let mem[currentSeg] = segLength - 1 - size;
                return foundSeg + 1;
            } else {
                let currentSeg = mem[currentSeg + 1];
            }
        }
        return -1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let mem[endSeg + 1] = o - 1;
        let mem[o] = -1;
        let endSeg = o - 1;
        return;
    }    
}
