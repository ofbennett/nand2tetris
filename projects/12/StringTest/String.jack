// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length;
    field Array base;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0){
            let base = Array.new(maxLength);
        } else {
            let base = -1;
        }
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(base = -1)){
            do base.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return base[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let base[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let base[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Currently does not check if the string is all digit characters.
        var int i;
        var int num;
        var int multiplier;
        var boolean neg;

        let num = 0;
        let multiplier = 1;
        if (base[0] = 45){
            let neg = true;
        } else {
            let neg = false;
        }
        while(i < length){
            if ((neg) & (i = (length - 1))){
                return -num;
            }
            let num = num + ((base[length - 1 - i] - 48) * multiplier);
            let multiplier = multiplier * 10;
            let i = i + 1;
        }
        return num;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let length = 0;
        if (val < 0){
            do appendChar(45);
            let val = -val;
        }
        do _setInt(val);
        return;
    }

    method void _setInt(int val){
        var int rem;

        if (val = 0){
            return;
        }
        let rem = val - ((val/10)*10);
        let val = val/10;
        do _setInt(val);
        do appendChar(rem + 48);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
